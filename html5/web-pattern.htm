<!DOCTYPE html>
<html>
<head>
    <title>Binary Pattern Generator</title>
    <style>
        body {
            display: flex;
            flex-direction: column;
            align-items: center;
            background: #f0f0f0;
            font-family: Arial, sans-serif;
        }
        canvas {
            border: 1px solid #333;
            margin: 20px;
            background: white;
        }
        .controls {
            display: flex;
            gap: 20px;
            margin: 10px;
        }
        .control-group {
            display: flex;
            flex-direction: column;
            align-items: center;
        }
        label {
            margin: 5px;
        }
    </style>
</head>
<body>
    <h1>Binary Pattern Generator</h1>
    <canvas id="canvas" width="256" height="256"></canvas>
    <div class="controls">
        <div class="control-group">
            <label for="param1">Parameter 1 (1-20):</label>
            <input type="range" id="param1" min="1" max="20" value="11">
        </div>
        <div class="control-group">
            <label for="param2">Parameter 2 (1-30):</label>
            <input type="range" id="param2" min="1" max="30" value="15">
        </div>
        <div class="control-group">
            <label for="param3">Parameter 3 (1-10):</label>
            <input type="range" id="param3" min="1" max="10" value="3">
        </div>
        <div class="control-group">
            <label for="invert">Invert:</label>
            <input type="checkbox" id="invert">
        </div>
    </div>

    <script>
        // Bitwise operations helpers
        function bitwiseAnd(a, b) {
            return a & b;
        }

        function bitwiseXor(a, b) {
            return a ^ b;
        }

        function bitwiseNot(n) {
            return ~n;
        }

        // The main pattern function
        function f(x, y, param1, param2, param3) {
            if (x === 0) return 0;
            
            const part1 = bitwiseAnd(x, x) % (y - param1);
            const part2 = -(Math.floor(param2 / x));
            const part3 = bitwiseNot(bitwiseXor(y, param3) + bitwiseNot(y));
            
            return bitwiseAnd(part1 - part2, part3) % param1;
        }

        // Setup canvas
        const canvas = document.getElementById('canvas');
        const ctx = canvas.getContext('2d');
        const imageData = ctx.createImageData(256, 256);

        // Get controls
        const param1Input = document.getElementById('param1');
        const param2Input = document.getElementById('param2');
        const param3Input = document.getElementById('param3');
        const invertInput = document.getElementById('invert');

        function updatePattern() {
            const param1 = parseInt(param1Input.value);
            const param2 = parseInt(param2Input.value);
            const param3 = parseInt(param3Input.value);
            const invert = invertInput.checked;

            // Generate pattern
            for (let y = 0; y < 256; y++) {
                for (let x = 0; x < 256; x++) {
                    let value = f(x, y, param1, param2, param3) % 2;
                    if (invert) value = 1 - value;
                    
                    const idx = (y * 256 + x) * 4;
                    const color = value * 255;
                    
                    imageData.data[idx] = color;     // R
                    imageData.data[idx + 1] = color; // G
                    imageData.data[idx + 2] = color; // B
                    imageData.data[idx + 3] = 255;   // A
                }
            }
            
            ctx.putImageData(imageData, 0, 0);
        }

        // Add event listeners to controls
        param1Input.addEventListener('input', updatePattern);
        param2Input.addEventListener('input', updatePattern);
        param3Input.addEventListener('input', updatePattern);
        invertInput.addEventListener('change', updatePattern);

        // Initial render
        updatePattern();
    </script>
</body>
</html>
